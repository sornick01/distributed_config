// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: protos/config_manager.proto

package protos

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConfigManagerClient is the client API for ConfigManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfigManagerClient interface {
	AddService(ctx context.Context, in *AddServiceRequest, opts ...grpc.CallOption) (*AddServiceReply, error)
	DeleteConfig(ctx context.Context, in *DeleteConfigRequest, opts ...grpc.CallOption) (*DeleteConfigReply, error)
	UpdateConfig(ctx context.Context, in *UpdateConfigRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetLatestConfig(ctx context.Context, in *GetLatestConfigRequest, opts ...grpc.CallOption) (*GetConfigReply, error)
	GetConfigByVersion(ctx context.Context, in *GetConfigByVersionRequest, opts ...grpc.CallOption) (*GetConfigReply, error)
}

type configManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigManagerClient(cc grpc.ClientConnInterface) ConfigManagerClient {
	return &configManagerClient{cc}
}

func (c *configManagerClient) AddService(ctx context.Context, in *AddServiceRequest, opts ...grpc.CallOption) (*AddServiceReply, error) {
	out := new(AddServiceReply)
	err := c.cc.Invoke(ctx, "/protos.ConfigManager/AddService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configManagerClient) DeleteConfig(ctx context.Context, in *DeleteConfigRequest, opts ...grpc.CallOption) (*DeleteConfigReply, error) {
	out := new(DeleteConfigReply)
	err := c.cc.Invoke(ctx, "/protos.ConfigManager/DeleteConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configManagerClient) UpdateConfig(ctx context.Context, in *UpdateConfigRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/protos.ConfigManager/UpdateConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configManagerClient) GetLatestConfig(ctx context.Context, in *GetLatestConfigRequest, opts ...grpc.CallOption) (*GetConfigReply, error) {
	out := new(GetConfigReply)
	err := c.cc.Invoke(ctx, "/protos.ConfigManager/GetLatestConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configManagerClient) GetConfigByVersion(ctx context.Context, in *GetConfigByVersionRequest, opts ...grpc.CallOption) (*GetConfigReply, error) {
	out := new(GetConfigReply)
	err := c.cc.Invoke(ctx, "/protos.ConfigManager/GetConfigByVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigManagerServer is the server API for ConfigManager service.
// All implementations must embed UnimplementedConfigManagerServer
// for forward compatibility
type ConfigManagerServer interface {
	AddService(context.Context, *AddServiceRequest) (*AddServiceReply, error)
	DeleteConfig(context.Context, *DeleteConfigRequest) (*DeleteConfigReply, error)
	UpdateConfig(context.Context, *UpdateConfigRequest) (*empty.Empty, error)
	GetLatestConfig(context.Context, *GetLatestConfigRequest) (*GetConfigReply, error)
	GetConfigByVersion(context.Context, *GetConfigByVersionRequest) (*GetConfigReply, error)
	mustEmbedUnimplementedConfigManagerServer()
}

// UnimplementedConfigManagerServer must be embedded to have forward compatible implementations.
type UnimplementedConfigManagerServer struct {
}

func (UnimplementedConfigManagerServer) AddService(context.Context, *AddServiceRequest) (*AddServiceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddService not implemented")
}
func (UnimplementedConfigManagerServer) DeleteConfig(context.Context, *DeleteConfigRequest) (*DeleteConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConfig not implemented")
}
func (UnimplementedConfigManagerServer) UpdateConfig(context.Context, *UpdateConfigRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfig not implemented")
}
func (UnimplementedConfigManagerServer) GetLatestConfig(context.Context, *GetLatestConfigRequest) (*GetConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestConfig not implemented")
}
func (UnimplementedConfigManagerServer) GetConfigByVersion(context.Context, *GetConfigByVersionRequest) (*GetConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigByVersion not implemented")
}
func (UnimplementedConfigManagerServer) mustEmbedUnimplementedConfigManagerServer() {}

// UnsafeConfigManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigManagerServer will
// result in compilation errors.
type UnsafeConfigManagerServer interface {
	mustEmbedUnimplementedConfigManagerServer()
}

func RegisterConfigManagerServer(s grpc.ServiceRegistrar, srv ConfigManagerServer) {
	s.RegisterService(&ConfigManager_ServiceDesc, srv)
}

func _ConfigManager_AddService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigManagerServer).AddService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ConfigManager/AddService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigManagerServer).AddService(ctx, req.(*AddServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigManager_DeleteConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigManagerServer).DeleteConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ConfigManager/DeleteConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigManagerServer).DeleteConfig(ctx, req.(*DeleteConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigManager_UpdateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigManagerServer).UpdateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ConfigManager/UpdateConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigManagerServer).UpdateConfig(ctx, req.(*UpdateConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigManager_GetLatestConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigManagerServer).GetLatestConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ConfigManager/GetLatestConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigManagerServer).GetLatestConfig(ctx, req.(*GetLatestConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigManager_GetConfigByVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigByVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigManagerServer).GetConfigByVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ConfigManager/GetConfigByVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigManagerServer).GetConfigByVersion(ctx, req.(*GetConfigByVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConfigManager_ServiceDesc is the grpc.ServiceDesc for ConfigManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConfigManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.ConfigManager",
	HandlerType: (*ConfigManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddService",
			Handler:    _ConfigManager_AddService_Handler,
		},
		{
			MethodName: "DeleteConfig",
			Handler:    _ConfigManager_DeleteConfig_Handler,
		},
		{
			MethodName: "UpdateConfig",
			Handler:    _ConfigManager_UpdateConfig_Handler,
		},
		{
			MethodName: "GetLatestConfig",
			Handler:    _ConfigManager_GetLatestConfig_Handler,
		},
		{
			MethodName: "GetConfigByVersion",
			Handler:    _ConfigManager_GetConfigByVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/config_manager.proto",
}
